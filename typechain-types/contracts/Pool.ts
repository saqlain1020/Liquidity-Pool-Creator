/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface PoolInterface extends utils.Interface {
  functions: {
    "addLiquidity(uint256,uint256)": FunctionFragment;
    "destroyContract()": FunctionFragment;
    "feeDecimals()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "lpTokenBalanceOf(address)": FunctionFragment;
    "lpTokenSupply()": FunctionFragment;
    "owner()": FunctionFragment;
    "productConstant()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveToken1()": FunctionFragment;
    "reserveToken2()": FunctionFragment;
    "resultingTokens(uint256,uint8)": FunctionFragment;
    "swap(uint256,uint8)": FunctionFragment;
    "token1()": FunctionFragment;
    "token1Address()": FunctionFragment;
    "token1Balance()": FunctionFragment;
    "token1Name()": FunctionFragment;
    "token2()": FunctionFragment;
    "token2Address()": FunctionFragment;
    "token2Balance()": FunctionFragment;
    "token2Name()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLiquidity()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "destroyContract"
      | "feeDecimals"
      | "feePercent"
      | "lpToken"
      | "lpTokenBalanceOf"
      | "lpTokenSupply"
      | "owner"
      | "productConstant"
      | "renounceOwnership"
      | "reserveToken1"
      | "reserveToken2"
      | "resultingTokens"
      | "swap"
      | "token1"
      | "token1Address"
      | "token1Balance"
      | "token1Name"
      | "token2"
      | "token2Address"
      | "token2Balance"
      | "token2Name"
      | "transferOwnership"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpTokenBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resultingTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token1Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token1Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token1Name",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token2Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token2Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token2Name",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resultingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token1Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token1Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token1Name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token2Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token2Name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityAdded(address,uint256,uint256)": EventFragment;
    "LiquidityWithdrawn(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LiquidityAddedEventObject {
  _from: string;
  _amount1: BigNumber;
  _amount2: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityWithdrawnEventObject {
  _from: string;
  _amount1: BigNumber;
  _amount2: BigNumber;
  _lpTokens: BigNumber;
}
export type LiquidityWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LiquidityWithdrawnEventObject
>;

export type LiquidityWithdrawnEventFilter =
  TypedEventFilter<LiquidityWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    lpTokenBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lpTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    productConstant(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveToken1(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveToken2(overrides?: CallOverrides): Promise<[BigNumber]>;

    resultingTokens(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swap(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    token1Address(overrides?: CallOverrides): Promise<[string]>;

    token1Balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    token1Name(overrides?: CallOverrides): Promise<[string]>;

    token2(overrides?: CallOverrides): Promise<[string]>;

    token2Address(overrides?: CallOverrides): Promise<[string]>;

    token2Balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    token2Name(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _amount1: BigNumberish,
    _amount2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  lpTokenBalanceOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  productConstant(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveToken1(overrides?: CallOverrides): Promise<BigNumber>;

  reserveToken2(overrides?: CallOverrides): Promise<BigNumber>;

  resultingTokens(
    _amount: BigNumberish,
    _sendingToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    _amount: BigNumberish,
    _sendingToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token1(overrides?: CallOverrides): Promise<string>;

  token1Address(overrides?: CallOverrides): Promise<string>;

  token1Balance(overrides?: CallOverrides): Promise<BigNumber>;

  token1Name(overrides?: CallOverrides): Promise<string>;

  token2(overrides?: CallOverrides): Promise<string>;

  token2Address(overrides?: CallOverrides): Promise<string>;

  token2Balance(overrides?: CallOverrides): Promise<BigNumber>;

  token2Name(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    destroyContract(overrides?: CallOverrides): Promise<void>;

    feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    lpTokenBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    productConstant(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveToken1(overrides?: CallOverrides): Promise<BigNumber>;

    reserveToken2(overrides?: CallOverrides): Promise<BigNumber>;

    resultingTokens(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token1(overrides?: CallOverrides): Promise<string>;

    token1Address(overrides?: CallOverrides): Promise<string>;

    token1Balance(overrides?: CallOverrides): Promise<BigNumber>;

    token1Name(overrides?: CallOverrides): Promise<string>;

    token2(overrides?: CallOverrides): Promise<string>;

    token2Address(overrides?: CallOverrides): Promise<string>;

    token2Balance(overrides?: CallOverrides): Promise<BigNumber>;

    token2Name(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidity(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "LiquidityAdded(address,uint256,uint256)"(
      _from?: string | null,
      _amount1?: null,
      _amount2?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      _from?: string | null,
      _amount1?: null,
      _amount2?: null
    ): LiquidityAddedEventFilter;

    "LiquidityWithdrawn(address,uint256,uint256,uint256)"(
      _from?: string | null,
      _amount1?: null,
      _amount2?: null,
      _lpTokens?: null
    ): LiquidityWithdrawnEventFilter;
    LiquidityWithdrawn(
      _from?: string | null,
      _amount1?: null,
      _amount2?: null,
      _lpTokens?: null
    ): LiquidityWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addLiquidity(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    lpTokenBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    productConstant(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveToken1(overrides?: CallOverrides): Promise<BigNumber>;

    reserveToken2(overrides?: CallOverrides): Promise<BigNumber>;

    resultingTokens(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    token1Address(overrides?: CallOverrides): Promise<BigNumber>;

    token1Balance(overrides?: CallOverrides): Promise<BigNumber>;

    token1Name(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<BigNumber>;

    token2Address(overrides?: CallOverrides): Promise<BigNumber>;

    token2Balance(overrides?: CallOverrides): Promise<BigNumber>;

    token2Name(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpTokenBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    productConstant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveToken2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resultingTokens(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _amount: BigNumberish,
      _sendingToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1Balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1Name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2Balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2Name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
